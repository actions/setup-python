name: Validate Python e2e

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'
  schedule:
    - cron: 30 3 * * *
  workflow_dispatch:

jobs:
  setup-versions-from-manifest:
    name: Setup ${{ matrix.python }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-20.04, ubuntu-22.04]
        python: [3.5.4, 3.6.7, 3.7.5, 3.8.15, 3.9.13]
        exclude:
          - os: ubuntu-22.04
            python: 3.5.4
          - os: ubuntu-22.04
            python: 3.6.7
          - os: ubuntu-22.04
            python: 3.7.5
          - os: windows-latest
            python: 3.8.15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: setup-python ${{ matrix.python }}
        id: setup-python
        uses: ./
        with:
          python-version: ${{ matrix.python }}

      - name: Check python-path
        run: ./__tests__/check-python-path.sh '${{ steps.setup-python.outputs.python-path }}'
        shell: bash

      - name: Validate version
        run: |
          $pythonVersion = (python --version)
          if ("Python ${{ matrix.python }}" -ne "$pythonVersion"){
            Write-Host "The current version is $pythonVersion; expected version is ${{ matrix.python }}"
            exit 1
          }
          $pythonVersion
        shell: pwsh

      - name: Run simple code
        run: python -c 'import math; print(math.factorial(5))'

  setup-versions-from-file:
    name: Setup ${{ matrix.python }} ${{ matrix.os }} version file
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-20.04, ubuntu-22.04]
        python: [3.5.4, 3.6.7, 3.7.5, 3.8.15, 3.9.13]
        exclude:
          - os: ubuntu-22.04
            python: 3.5.4
          - os: ubuntu-22.04
            python: 3.6.7
          - os: ubuntu-22.04
            python: 3.7.5
          - os: windows-latest
            python: 3.8.15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: build-version-file ${{ matrix.python }}
        run: echo ${{ matrix.python }} > .python-version

      - name: setup-python ${{ matrix.python }}
        id: setup-python
        uses: ./
        with:
          python-version-file: .python-version

      - name: Check python-path
        run: ./__tests__/check-python-path.sh '${{ steps.setup-python.outputs.python-path }}'
        shell: bash

      - name: Validate version
        run: |
          $pythonVersion = (python --version)
          if ("Python ${{ matrix.python }}" -ne "$pythonVersion"){
            Write-Host "The current version is $pythonVersion; expected version is ${{ matrix.python }}"
            exit 1
          }
          $pythonVersion
        shell: pwsh

      - name: Run simple code
        run: python -c 'import math; print(math.factorial(5))'

  setup-versions-from-file-without-parameter:
    name: Setup ${{ matrix.python }} ${{ matrix.os }} version file without parameter
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-20.04, ubuntu-22.04]
        python: [3.5.4, 3.6.7, 3.7.5, 3.8.15, 3.9.13]
        exclude:
          - os: ubuntu-22.04
            python: 3.5.4
          - os: ubuntu-22.04
            python: 3.6.7
          - os: ubuntu-22.04
            python: 3.7.5
          - os: windows-latest
            python: 3.8.15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: build-version-file ${{ matrix.python }}
        run: echo ${{ matrix.python }} > .python-version

      - name: setup-python ${{ matrix.python }}
        id: setup-python
        uses: ./

      - name: Check python-path
        run: ./__tests__/check-python-path.sh '${{ steps.setup-python.outputs.python-path }}'
        shell: bash

      - name: Validate version
        run: |
          $pythonVersion = (python --version)
          if ("Python ${{ matrix.python }}" -ne "$pythonVersion"){
            Write-Host "The current version is $pythonVersion; expected version is ${{ matrix.python }}"
            exit 1
          }
          $pythonVersion
        shell: pwsh

      - name: Run simple code
        run: python -c 'import math; print(math.factorial(5))'

  setup-versions-from-standard-pyproject-file:
    name: Setup ${{ matrix.python }} ${{ matrix.os }} standard pyproject file
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-20.04, ubuntu-22.04]
        python: [3.5.4, 3.6.7, 3.7.5, 3.8.15, 3.9.13, '==3.10.10']
        exclude:
          - os: ubuntu-22.04
            python: 3.5.4
          - os: ubuntu-22.04
            python: 3.6.7
          - os: ubuntu-22.04
            python: 3.7.5
          - os: windows-latest
            python: 3.8.15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: build-version-file ${{ matrix.python }}
        run: |
          echo '[project]
            requires-python = "${{ matrix.python }}"
          ' > pyproject.toml

      - name: setup-python ${{ matrix.python }}
        id: setup-python
        uses: ./
        with:
          python-version-file: pyproject.toml

      - name: Check python-path
        run: ./__tests__/check-python-path.sh '${{ steps.setup-python.outputs.python-path }}'
        shell: bash

      - name: Validate version
        run: |
          $pythonVersion = (python --version)
          if ("Python ${{ matrix.python }}".replace("==", "") -ne "$pythonVersion"){
            Write-Host "The current version is $pythonVersion; expected version is ${{ matrix.python }}"
            exit 1
          }
          $pythonVersion
        shell: pwsh

      - name: Run simple code
        run: python -c 'import math; print(math.factorial(5))'

  setup-versions-from-poetry-pyproject-file:
    name: Setup ${{ matrix.python }} ${{ matrix.os }} poetry pyproject file
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-20.04, ubuntu-22.04]
        python: [3.5.4, 3.6.7, 3.7.5, 3.8.15, 3.9.13]
        exclude:
          - os: ubuntu-22.04
            python: 3.5.4
          - os: ubuntu-22.04
            python: 3.6.7
          - os: ubuntu-22.04
            python: 3.7.5
          - os: windows-latest
            python: 3.8.15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: build-version-file ${{ matrix.python }}
        run: |
          echo '[tool.poetry.dependencies]
            python = "${{ matrix.python }}"
          ' > pyproject.toml

      - name: setup-python ${{ matrix.python }}
        id: setup-python
        uses: ./
        with:
          python-version-file: pyproject.toml

      - name: Check python-path
        run: ./__tests__/check-python-path.sh '${{ steps.setup-python.outputs.python-path }}'
        shell: bash

      - name: Validate version
        run: |
          $pythonVersion = (python --version)
          if ("Python ${{ matrix.python }}" -ne "$pythonVersion"){
            Write-Host "The current version is $pythonVersion; expected version is ${{ matrix.python }}"
            exit 1
          }
          $pythonVersion
        shell: pwsh

      - name: Run simple code
        run: python -c 'import math; print(math.factorial(5))'

  setup-pre-release-version-from-manifest:
    name: Setup 3.9.0-beta.4 ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-20.04]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: setup-python 3.9.0-beta.4
        id: setup-python
        uses: ./
        with:
          python-version: '3.9.0-beta.4'

      - name: Check python-path
        run: ./__tests__/check-python-path.sh '${{ steps.setup-python.outputs.python-path }}'
        shell: bash

      - name: Validate version
        run: |
          $pythonVersion = (python --version)
          if ("Python 3.9.0b4" -ne "$pythonVersion"){
            Write-Host "The current version is $pythonVersion; expected version is 3.9.0b4"
            exit 1
          }
          $pythonVersion
        shell: pwsh

      - name: Run simple code
        run: python -c 'import math; print(math.factorial(5))'

  setup-dev-version:
    name: Setup 3.9-dev ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: setup-python 3.9-dev
        id: setup-python
        uses: ./
        with:
          python-version: '3.9-dev'

      - name: Check python-path
        run: ./__tests__/check-python-path.sh '${{ steps.setup-python.outputs.python-path }}'
        shell: bash

      - name: Validate version
        run: ${{ startsWith(steps.setup-python.outputs.python-version, '3.9.') }}
        shell: bash

      - name: Run simple code
        run: python -c 'import math; print(math.factorial(5))'

  setup-prerelease-version:
    name: Setup 3.12 ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: setup-python 3.12
        id: setup-python
        uses: ./
        with:
          python-version: '3.12'
          allow-prereleases: true

      - name: Check python-path
        run: ./__tests__/check-python-path.sh '${{ steps.setup-python.outputs.python-path }}'
        shell: bash

      - name: Validate version
        run: ${{ startsWith(steps.setup-python.outputs.python-version, '3.12.') }}
        shell: bash

      - name: Run simple code
        run: python -c 'import math; print(math.factorial(5))'

  setup-versions-noenv:
    name: Setup ${{ matrix.python }} ${{ matrix.os }} (noenv)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-20.04, ubuntu-22.04]
        python: ['3.7', '3.8', '3.9', '3.10']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: setup-python ${{ matrix.python }}
        id: setup-python
        uses: ./
        with:
          python-version: ${{ matrix.python }}
          update-environment: false

      - name: Python version
        run: ${{ steps.setup-python.outputs.python-path }} --version

      - name: Run simple code
        run: ${{ steps.setup-python.outputs.python-path }} -c 'import math; print(math.factorial(5))'

  check-latest:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10']
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python and check latest
        uses: ./
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true
      - name: Validate version
        run: |
          $pythonVersion = (python --version)
          if ("$pythonVersion" -NotMatch "${{ matrix.python-version }}"){
            Write-Host "The current version is $pythonVersion; expected version is ${{ matrix.python-version }}"
            exit 1
          }
          $pythonVersion
        shell: pwsh

  setup-python-multiple-python-versions:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python and check latest
        uses: ./
        with:
          python-version: |
            3.7
            3.8
            3.9
            3.10
          check-latest: true
      - name: Validate version
        run: |
          $pythonVersion = (python --version)
          if ("$pythonVersion" -NotMatch "3.10"){
            Write-Host "The current version is $pythonVersion; expected version is 3.10"
            exit 1
          }
          $pythonVersion
        shell: pwsh
